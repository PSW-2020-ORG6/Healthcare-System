// <auto-generated />
using System;
using HealthClinicBackend.Backend.Repository.DatabaseSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthClinicBackend.Migrations
{
    [DbContext(typeof(HealthCareSystemDbContext))]
    partial class HealthCareSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Diagnose")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("FamilyDiseases")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("Guest")
                        .HasColumnType("boolean");

                    b.Property<string>("HealthInsuranceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PersonalDiseases")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("StateOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            SerialNumber = "0002",
                            Contact = "kontakt",
                            DateOfBirth = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0002",
                            Name = "Jelena",
                            ParentName = "otac",
                            Password = "sifra",
                            Surname = "Tanjic"
                        },
                        new
                        {
                            SerialNumber = "0003",
                            Contact = "kontaktMica",
                            DateOfBirth = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emailMica",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0003",
                            Name = "Sara",
                            ParentName = "mama",
                            Password = "sifraMica",
                            Surname = "Milic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Secretary");

                    b.HasData(
                        new
                        {
                            SerialNumber = "123a",
                            AddressSerialNumber = "200001",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = "111",
                            Name = "Marko",
                            Password = "123",
                            Surname = "Markovic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Specialization", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            SerialNumber = "500001",
                            Name = "Neuropsychiatrist "
                        },
                        new
                        {
                            SerialNumber = "500002",
                            Name = "Neurosurgeon "
                        },
                        new
                        {
                            SerialNumber = "500003",
                            Name = "Kneesurgeon "
                        },
                        new
                        {
                            SerialNumber = "500004",
                            Name = "General practitioner"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            SerialNumber = "4ef0e84b-d2e1-4bfa-9ab7-d4b55790e3df",
                            Approved = true,
                            Date = new DateTime(2016, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "super"
                        },
                        new
                        {
                            SerialNumber = "fe596a8e-a66e-45f7-8c46-fcabf56f0bd5",
                            Approved = false,
                            Date = new DateTime(2015, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "onako"
                        },
                        new
                        {
                            SerialNumber = "55458aa8-074c-4e0d-aa67-ce7028d70523",
                            Approved = true,
                            Date = new DateTime(2018, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0002",
                            Text = "moze bolje"
                        },
                        new
                        {
                            SerialNumber = "71e11297-c12d-47c0-ab6e-c9e605c63355",
                            Approved = false,
                            Date = new DateTime(2019, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0003",
                            Text = "dobro"
                        },
                        new
                        {
                            SerialNumber = "15702b6c-47d4-45e3-8b4d-a1c4a5078d40",
                            Approved = true,
                            Date = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0007",
                            Text = "nikako"
                        },
                        new
                        {
                            SerialNumber = "55e74a72-4939-4f0b-a82c-93c0f54aed3c",
                            Approved = false,
                            Date = new DateTime(2019, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0008",
                            Text = "sve pohvale"
                        },
                        new
                        {
                            SerialNumber = "2fe2f4e2-cd95-410f-b126-303bb843b3f0",
                            Approved = true,
                            Date = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "00010",
                            Text = "usluga na nivou"
                        },
                        new
                        {
                            SerialNumber = "a386e04f-4379-4e06-ac44-155d84d795d1",
                            Approved = false,
                            Date = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0004",
                            Text = "ok"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Building", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Building");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10001",
                            Color = "Orange",
                            Column = 1,
                            Name = "Cardiology",
                            Row = 5,
                            Style = "TriangleBuildingButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "10002",
                            Color = "Red",
                            Column = 3,
                            Name = "Orthopedy",
                            Row = 5,
                            Style = "UBuildingButtonStyle"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Equipment");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Equipment");

                    b.HasData(
                        new
                        {
                            SerialNumber = "78",
                            Id = "16",
                            Name = "Table",
                            Quantity = 6,
                            RoomId = "104",
                            RoomSerialNumber = "104"
                        },
                        new
                        {
                            SerialNumber = "80",
                            Id = "18",
                            Name = "Table",
                            Quantity = 3,
                            RoomId = "101",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "81",
                            Id = "19",
                            Name = "Syringe",
                            Quantity = 100,
                            RoomId = "102",
                            RoomSerialNumber = "102"
                        },
                        new
                        {
                            SerialNumber = "83",
                            Id = "21",
                            Name = "Mask",
                            Quantity = 30,
                            RoomId = "104",
                            RoomSerialNumber = "104"
                        },
                        new
                        {
                            SerialNumber = "84",
                            Id = "22",
                            Name = "Stethoscope",
                            Quantity = 10,
                            RoomId = "101",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "85",
                            Id = "23",
                            Name = "Gloves",
                            Quantity = 30,
                            RoomId = "105",
                            RoomSerialNumber = "105"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Floor", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Floor");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1001",
                            BuildingSerialNumber = "10001",
                            Name = "Ground floor"
                        },
                        new
                        {
                            SerialNumber = "1002",
                            BuildingSerialNumber = "10001",
                            Name = "First floor"
                        },
                        new
                        {
                            SerialNumber = "1003",
                            BuildingSerialNumber = "10002",
                            Name = "Ground floor"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Medicine", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CopyrightName")
                        .HasColumnType("text");

                    b.Property<string>("GenericName")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineManufacturerSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            SerialNumber = "21",
                            CopyrightName = "Brufen",
                            GenericName = "Brufen",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "1",
                            MedicineTypeSerialNumber = "11",
                            Quantity = 50,
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "22",
                            CopyrightName = "Probiotic",
                            GenericName = "Probiotic",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "2",
                            MedicineTypeSerialNumber = "12",
                            Quantity = 30,
                            RoomSerialNumber = "102"
                        },
                        new
                        {
                            SerialNumber = "23",
                            CopyrightName = "Aspirin",
                            GenericName = "Aspirin",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "2",
                            MedicineTypeSerialNumber = "12",
                            Quantity = 150,
                            RoomSerialNumber = "103"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineManufacturer", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineManufacturer");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1",
                            Name = "manufacturer1"
                        },
                        new
                        {
                            SerialNumber = "2",
                            Name = "manufacturer2"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "11",
                            Type = "Antibiotic"
                        },
                        new
                        {
                            SerialNumber = "12",
                            Type = "Brufen"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber")
                        .IsUnique();

                    b.ToTable("Rejection");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("BottomDoorVisible")
                        .HasColumnType("integer");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<int>("LeftDoorVisible")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("RightDoorVisible")
                        .HasColumnType("integer");

                    b.Property<string>("RoomTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.Property<int>("TopDoorVisible")
                        .HasColumnType("integer");

                    b.HasKey("SerialNumber");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            SerialNumber = "101",
                            BottomDoorVisible = 0,
                            FloorSerialNumber = "1001",
                            Id = 101,
                            LeftDoorVisible = 2,
                            Name = "Examination room 101",
                            RightDoorVisible = 0,
                            RoomTypeSerialNumber = "10000003",
                            Style = "RoomButtonStyle",
                            TopDoorVisible = 2
                        },
                        new
                        {
                            SerialNumber = "102",
                            BottomDoorVisible = 0,
                            FloorSerialNumber = "1001",
                            Id = 102,
                            LeftDoorVisible = 2,
                            Name = "Examination room 102",
                            RightDoorVisible = 2,
                            RoomTypeSerialNumber = "10000003",
                            Style = "RoomButtonStyle",
                            TopDoorVisible = 2
                        },
                        new
                        {
                            SerialNumber = "103",
                            BottomDoorVisible = 0,
                            FloorSerialNumber = "1001",
                            Id = 103,
                            LeftDoorVisible = 2,
                            Name = "Store room 103",
                            RightDoorVisible = 2,
                            RoomTypeSerialNumber = "10000002",
                            Style = "RoomButtonStyle",
                            TopDoorVisible = 2
                        },
                        new
                        {
                            SerialNumber = "104",
                            BottomDoorVisible = 0,
                            FloorSerialNumber = "1001",
                            Id = 104,
                            LeftDoorVisible = 2,
                            Name = "Examination room 104",
                            RightDoorVisible = 2,
                            RoomTypeSerialNumber = "10000003",
                            Style = "RoomButtonStyle",
                            TopDoorVisible = 2
                        },
                        new
                        {
                            SerialNumber = "105",
                            BottomDoorVisible = 2,
                            FloorSerialNumber = "1001",
                            Id = 105,
                            LeftDoorVisible = 0,
                            Name = "Store room 105",
                            RightDoorVisible = 0,
                            RoomTypeSerialNumber = "10000002",
                            Style = "RoomButtonStyle",
                            TopDoorVisible = 0
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.RoomType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10000001",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "10000002",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "10000003",
                            Name = "Examination room"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagnosticTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("DiagnosticTypeSerialNumber");

                    b.ToTable("DiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("DiagnosticType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("MedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<string>("PatientConditions")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysitianName")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("SpecialistReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialnumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Urgency")
                        .HasColumnType("boolean");

                    b.HasKey("SerialNumber");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Active = false,
                            Date = new DateTime(2021, 1, 11, 17, 11, 35, 272, DateTimeKind.Local).AddTicks(6570),
                            PatientSerialNumber = "0002",
                            PhysicianSerialNumber = "600001",
                            ProcedureTypeSerialnumber = "300001",
                            RoomSerialNumber = "101",
                            Urgency = true
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Active = false,
                            Date = new DateTime(2021, 1, 11, 17, 11, 35, 272, DateTimeKind.Local).AddTicks(8010),
                            PatientSerialNumber = "0002",
                            PhysicianSerialNumber = "600001",
                            ProcedureTypeSerialnumber = "300002",
                            RoomSerialNumber = "102",
                            Urgency = false
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.EquipmentRelocation", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("endTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("equipmentSerialNumber")
                        .HasColumnType("text");

                    b.Property<long>("quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("roomToRelocateToSerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("startTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("SerialNumber");

                    b.ToTable("EquipmentRelocations");

                    b.HasData(
                        new
                        {
                            SerialNumber = "ER1",
                            endTime = new DateTime(2021, 1, 20, 10, 0, 0, 0, DateTimeKind.Unspecified),
                            equipmentSerialNumber = "78",
                            quantity = 1L,
                            roomToRelocateToSerialNumber = "105",
                            startTime = new DateTime(2021, 1, 20, 9, 30, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "300001",
                            EstimatedTimeInMinutes = 50,
                            Name = "Appointment with neuropsychiatrist",
                            SpecializationSerialNumber = "500001"
                        },
                        new
                        {
                            SerialNumber = "300002",
                            EstimatedTimeInMinutes = 30,
                            Name = "Appointment with general practitioner",
                            SpecializationSerialNumber = "500004"
                        },
                        new
                        {
                            SerialNumber = "300003",
                            EstimatedTimeInMinutes = 40,
                            Name = "Operation by neurosurgeon ",
                            SpecializationSerialNumber = "500002"
                        },
                        new
                        {
                            SerialNumber = "300004",
                            EstimatedTimeInMinutes = 60,
                            Name = "Operation by kneesurgeon",
                            SpecializationSerialNumber = "500003"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureTypeEquipmentUsage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureTypeEquipmentUsage");

                    b.HasData(
                        new
                        {
                            SerialNumber = "400001",
                            EquipmentSerialNumber = "81",
                            ProcedureTypeSerialNumber = "300001"
                        },
                        new
                        {
                            SerialNumber = "400002",
                            EquipmentSerialNumber = "82",
                            ProcedureTypeSerialNumber = "300002"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("QuestionText")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "The doctor is welcoming and gentle?",
                            SerialNumber = "234ecb39-b078-4d73-9600-1a854e4061e3"
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "The doctor answered all of your questions in an understandable manner?",
                            SerialNumber = "51ec4b1e-85bb-434b-a6c2-0cd8ccdaa65d"
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "The doctor takes care of you in a professional manner?",
                            SerialNumber = "453c6201-a398-4b01-a777-f9f4f42063ee"
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Would you have the procedure done again by this doctor?",
                            SerialNumber = "511ef2c5-d2d8-469c-832f-fa39e0ea5c51"
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "The personal manner(courtosy,respect,sensitivity,friendliness) of the nurses and other support staff?",
                            SerialNumber = "8b58053d-8999-4385-9b13-2ff5f753f051"
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "The nursees answered all of your questions in an understandable manner?",
                            SerialNumber = "d4c9b9be-228e-4f26-8491-6df69c14e0c2"
                        },
                        new
                        {
                            Id = 7,
                            QuestionText = "Orientation given to warn setup",
                            SerialNumber = "0a44077b-d007-49c6-9821-5778b7da57df"
                        },
                        new
                        {
                            Id = 8,
                            QuestionText = "The nurse gave you good discharge instructions",
                            SerialNumber = "aa68c011-90e4-4a16-b0a0-f2075154ac65"
                        },
                        new
                        {
                            Id = 9,
                            QuestionText = "The nurse was concern for you?",
                            SerialNumber = "a5b85d0b-8ca6-4cd7-8137-03aa48595962"
                        },
                        new
                        {
                            Id = 10,
                            QuestionText = "The comfort and cleanliness of the facility",
                            SerialNumber = "5f0dae2e-9148-46a7-9e35-4bdd044b54a4"
                        },
                        new
                        {
                            Id = 11,
                            QuestionText = "Comfort level within the procedure room?",
                            SerialNumber = "1166b3f2-4ff4-418c-8207-3e91ee7a00a1"
                        },
                        new
                        {
                            Id = 12,
                            QuestionText = "Conditions of the rooms(temperature,comfort,silence)",
                            SerialNumber = "e944ccce-1e1b-45f6-9291-80fbd2de5a69"
                        },
                        new
                        {
                            Id = 13,
                            QuestionText = "General impression of the ambient atmosphere",
                            SerialNumber = "5bce5956-52bc-4187-950e-b3fd195dfd80"
                        },
                        new
                        {
                            Id = 14,
                            QuestionText = "Do you think the clinic has the necessary equipment",
                            SerialNumber = "1ed71630-13f7-44d9-917d-342a0b96da6c"
                        },
                        new
                        {
                            Id = 15,
                            QuestionText = "Do you think the clinic's farmacy has the necessary drugs?",
                            SerialNumber = "211a4479-32a0-4b54-a8f0-410fb8d99089"
                        },
                        new
                        {
                            Id = 16,
                            QuestionText = "Do you think that the hospital should have more modern equipment than the current one",
                            SerialNumber = "ffaa9d66-b421-40ca-aac4-19a736587e5c"
                        },
                        new
                        {
                            Id = 17,
                            QuestionText = "Did you noticed broken or damaged equipment in the hospital",
                            SerialNumber = "c0e55b66-3197-48d6-868e-01818bf9fc49"
                        },
                        new
                        {
                            Id = 18,
                            QuestionText = "The doctor prescribed medications that I could buy at the clinic's pharmacy",
                            SerialNumber = "51395c39-9ba0-48b0-adfe-c889d7a030b9"
                        },
                        new
                        {
                            Id = 19,
                            QuestionText = "Did you found it easy to use our website?",
                            SerialNumber = "6ef0403d-1c96-415c-a18b-64706b4844b5"
                        },
                        new
                        {
                            Id = 20,
                            QuestionText = "Did you have found all the necessary information on our website?",
                            SerialNumber = "2898f535-deba-4106-9365-b058aa2ce81f"
                        },
                        new
                        {
                            Id = 21,
                            QuestionText = "Overall, are you satisfied with the care you received in this facility?",
                            SerialNumber = "da67e8b8-c260-4893-8cb0-3503f7a820e7"
                        },
                        new
                        {
                            Id = 22,
                            QuestionText = "Would you come to this institution again",
                            SerialNumber = "c5e60635-d5bf-4195-81f8-3d8ea33a9aa1"
                        },
                        new
                        {
                            Id = 23,
                            QuestionText = ">Would you recommend this facility to your friends and family",
                            SerialNumber = "31d75d2b-fbca-4ef3-8e52-b2b5636e1bc6"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Survey", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Question1")
                        .HasColumnType("text");

                    b.Property<string>("Question10")
                        .HasColumnType("text");

                    b.Property<string>("Question11")
                        .HasColumnType("text");

                    b.Property<string>("Question12")
                        .HasColumnType("text");

                    b.Property<string>("Question13")
                        .HasColumnType("text");

                    b.Property<string>("Question14")
                        .HasColumnType("text");

                    b.Property<string>("Question15")
                        .HasColumnType("text");

                    b.Property<string>("Question16")
                        .HasColumnType("text");

                    b.Property<string>("Question17")
                        .HasColumnType("text");

                    b.Property<string>("Question18")
                        .HasColumnType("text");

                    b.Property<string>("Question19")
                        .HasColumnType("text");

                    b.Property<string>("Question2")
                        .HasColumnType("text");

                    b.Property<string>("Question20")
                        .HasColumnType("text");

                    b.Property<string>("Question21")
                        .HasColumnType("text");

                    b.Property<string>("Question22")
                        .HasColumnType("text");

                    b.Property<string>("Question23")
                        .HasColumnType("text");

                    b.Property<string>("Question3")
                        .HasColumnType("text");

                    b.Property<string>("Question4")
                        .HasColumnType("text");

                    b.Property<string>("Question5")
                        .HasColumnType("text");

                    b.Property<string>("Question6")
                        .HasColumnType("text");

                    b.Property<string>("Question7")
                        .HasColumnType("text");

                    b.Property<string>("Question8")
                        .HasColumnType("text");

                    b.Property<string>("Question9")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Survey");

                    b.HasData(
                        new
                        {
                            SerialNumber = "993d8fd5-cec8-44e4-8e31-427420dc52ca",
                            DoctorName = "Pera Peric",
                            Id = "001",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        },
                        new
                        {
                            SerialNumber = "fadfd0f0-3143-4759-ad05-20cb9bb46048",
                            DoctorName = "Mika Mikic",
                            Id = "005",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CitySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CitySerialNumber");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Street = "Njegoševa 45"
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Street = "Njegoševa 46"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CountrySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CountrySerialNumber");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Country", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("PhysicianSerialNumber", "SpecializationSerialNumber");

                    b.ToTable("PhysicianSpecialization");

                    b.HasData(
                        new
                        {
                            PhysicianSerialNumber = "600001",
                            SpecializationSerialNumber = "500001"
                        },
                        new
                        {
                            PhysicianSerialNumber = "600001",
                            SpecializationSerialNumber = "500002"
                        },
                        new
                        {
                            PhysicianSerialNumber = "600002",
                            SpecializationSerialNumber = "500001"
                        },
                        new
                        {
                            PhysicianSerialNumber = "600002",
                            SpecializationSerialNumber = "500002"
                        },
                        new
                        {
                            PhysicianSerialNumber = "600002",
                            SpecializationSerialNumber = "500003"
                        },
                        new
                        {
                            PhysicianSerialNumber = "600002",
                            SpecializationSerialNumber = "500004"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MedicineDosageSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicineDosageSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("PrescriptionMedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ProcedureEquipment", b =>
                {
                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("ProcedureTypeSerialNumber", "EquipmentSerialNumber");

                    b.ToTable("ProcedureEquipment");

                    b.HasData(
                        new
                        {
                            ProcedureTypeSerialNumber = "300001",
                            EquipmentSerialNumber = "78"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300001",
                            EquipmentSerialNumber = "80"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300001",
                            EquipmentSerialNumber = "81"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300002",
                            EquipmentSerialNumber = "80"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300002",
                            EquipmentSerialNumber = "83"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300002",
                            EquipmentSerialNumber = "85"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300003",
                            EquipmentSerialNumber = "84"
                        },
                        new
                        {
                            ProcedureTypeSerialNumber = "300004",
                            EquipmentSerialNumber = "82"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticReferralSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticReferralSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportDiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FollowUpSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportFollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportPrescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistReferralSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportSerialNumber");

                    b.HasIndex("SpecialistReferralSerialNumber")
                        .IsUnique();

                    b.ToTable("ReportSpecialistReferral");
                });

            modelBuilder.Entity("Model.Accounts.Physician", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.ToTable("Physician");

                    b.HasData(
                        new
                        {
                            SerialNumber = "600001",
                            AddressSerialNumber = "200001",
                            Contact = "Simic kontakt",
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simic@gmail.com",
                            Id = "600001",
                            Name = "Gojko",
                            Password = "sifraSimic24dsf1",
                            Surname = "Simic"
                        },
                        new
                        {
                            SerialNumber = "600002",
                            AddressSerialNumber = "200002",
                            Contact = "Dicic kontakt",
                            DateOfBirth = new DateTime(1985, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dicic@gmail.com",
                            Id = "600002",
                            Name = "Klara",
                            Password = "sifraDicic98754",
                            Surname = "Dicic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.HasBaseType("HealthClinicBackend.Backend.Model.Hospital.Equipment");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.HasIndex("PatientSerialNumber");

                    b.HasDiscriminator().HasValue("Bed");

                    b.HasData(
                        new
                        {
                            SerialNumber = "100001",
                            Id = "100001",
                            Name = "Bed 1",
                            Quantity = 0,
                            RoomId = "101",
                            RoomSerialNumber = "101",
                            PatientSerialNumber = "0002"
                        },
                        new
                        {
                            SerialNumber = "100002",
                            Id = "100002",
                            Name = "Bed 2",
                            Quantity = 0,
                            RoomId = "102",
                            RoomSerialNumber = "101",
                            PatientSerialNumber = "0003"
                        },
                        new
                        {
                            SerialNumber = "100003",
                            Id = "100003",
                            Name = "Bed 3",
                            Quantity = 0,
                            RoomId = "103",
                            RoomSerialNumber = "102"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "ChosenPhysician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Model.Hospital.Rejection", "MedicineSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.OwnsOne("HealthClinicBackend.Backend.Model.Hospital.Position", "Position", b1 =>
                        {
                            b1.Property<string>("RoomSerialNumber")
                                .HasColumnType("text");

                            b1.Property<int>("Column")
                                .HasColumnType("integer");

                            b1.Property<int>("ColumnSpan")
                                .HasColumnType("integer");

                            b1.Property<int>("Row")
                                .HasColumnType("integer");

                            b1.Property<int>("RowSpan")
                                .HasColumnType("integer");

                            b1.HasKey("RoomSerialNumber");

                            b1.ToTable("Room");

                            b1.WithOwner()
                                .HasForeignKey("RoomSerialNumber");

                            b1.HasData(
                                new
                                {
                                    RoomSerialNumber = "101",
                                    Column = 14,
                                    ColumnSpan = 4,
                                    Row = 6,
                                    RowSpan = 3
                                },
                                new
                                {
                                    RoomSerialNumber = "102",
                                    Column = 10,
                                    ColumnSpan = 4,
                                    Row = 0,
                                    RowSpan = 2
                                },
                                new
                                {
                                    RoomSerialNumber = "103",
                                    Column = 5,
                                    ColumnSpan = 3,
                                    Row = 0,
                                    RowSpan = 2
                                },
                                new
                                {
                                    RoomSerialNumber = "104",
                                    Column = 14,
                                    ColumnSpan = 5,
                                    Row = 0,
                                    RowSpan = 3
                                },
                                new
                                {
                                    RoomSerialNumber = "105",
                                    Column = 17,
                                    ColumnSpan = 1,
                                    Row = 12,
                                    RowSpan = 1
                                });
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", "DiagnosticType")
                        .WithMany()
                        .HasForeignKey("DiagnosticTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", null)
                        .WithMany("MedicineDosage")
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.OwnsOne("HealthClinicBackend.Backend.Model.Util.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<string>("AppointmentSerialNumber")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentSerialNumber");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentSerialNumber");

                            b1.HasData(
                                new
                                {
                                    AppointmentSerialNumber = "200001",
                                    End = new DateTime(2021, 1, 11, 17, 11, 35, 272, DateTimeKind.Local).AddTicks(315),
                                    Start = new DateTime(2021, 1, 11, 17, 11, 35, 268, DateTimeKind.Local).AddTicks(7216)
                                },
                                new
                                {
                                    AppointmentSerialNumber = "200002",
                                    End = new DateTime(2021, 1, 11, 17, 11, 35, 272, DateTimeKind.Local).AddTicks(1715),
                                    Start = new DateTime(2021, 1, 11, 17, 11, 35, 272, DateTimeKind.Local).AddTicks(1696)
                                });
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.City", "City")
                        .WithMany()
                        .HasForeignKey("CitySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountrySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", "MedicineDosage")
                        .WithMany()
                        .HasForeignKey("MedicineDosageSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", "DiagnosticReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", "DiagnosticReferralSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", "FollowUp")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", "FollowUpSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", "PrescriptionSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", "SpecialistReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", "SpecialistReferralSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientSerialNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
