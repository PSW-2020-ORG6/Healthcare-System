// <auto-generated />
using System;
using HealthClinicBackend.Backend.Repository.DatabaseSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthClinicBackend.Migrations
{
    [DbContext(typeof(HealthCareSystemDbContext))]
    partial class HealthCareSystemDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("FamilyDiseases")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("Guest")
                        .HasColumnType("boolean");

                    b.Property<string>("HealthInsuranceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PersonalDiseases")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("StateOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            SerialNumber = "0002",
                            Contact = "kontakt",
                            DateOfBirth = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0002",
                            Name = "Jelena",
                            ParentName = "otac",
                            Password = "sifra",
                            Surname = "Tanjic"
                        },
                        new
                        {
                            SerialNumber = "0003",
                            Contact = "kontaktMica",
                            DateOfBirth = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emailMica",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0003",
                            Name = "Sara",
                            ParentName = "mama",
                            Password = "sifraMica",
                            Surname = "Milic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Secretary");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Specialization", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            SerialNumber = "500001",
                            Name = "Neurosurgeon "
                        },
                        new
                        {
                            SerialNumber = "500002",
                            Name = "Family doctor"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            SerialNumber = "3d2beca3-b9e1-409a-b115-3adf36b5e6f9",
                            Approved = true,
                            Date = new DateTime(2016, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "super"
                        },
                        new
                        {
                            SerialNumber = "90c764a7-adb9-478e-ba5c-12abc7dc5abb",
                            Approved = false,
                            Date = new DateTime(2015, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "onako"
                        },
                        new
                        {
                            SerialNumber = "d0a94946-41ec-494b-a705-8e1def3d1ec9",
                            Approved = true,
                            Date = new DateTime(2018, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0002",
                            Text = "moze bolje"
                        },
                        new
                        {
                            SerialNumber = "cf7d48cd-92b7-46a2-a749-839c4b5e9c3c",
                            Approved = false,
                            Date = new DateTime(2019, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0003",
                            Text = "dobro"
                        },
                        new
                        {
                            SerialNumber = "7ec9311f-d1d8-4256-865f-3abdbb9e824f",
                            Approved = true,
                            Date = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0007",
                            Text = "nikako"
                        },
                        new
                        {
                            SerialNumber = "f683c5d9-b93c-4fb3-ba02-30a8a1c8de0d",
                            Approved = false,
                            Date = new DateTime(2019, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0008",
                            Text = "sve pohvale"
                        },
                        new
                        {
                            SerialNumber = "08dde094-2115-4b7d-be91-3f41b3b93b3a",
                            Approved = true,
                            Date = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "00010",
                            Text = "usluga na nivou"
                        },
                        new
                        {
                            SerialNumber = "72aab4af-1535-4ade-82b0-99e3692a03ca",
                            Approved = false,
                            Date = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0004",
                            Text = "ok"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Bed");

                    b.HasData(
                        new
                        {
                            SerialNumber = "100001",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100001",
                            Name = "Bed 1",
                            PatientSerialNumber = "0002",
                            RoomId = "101",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "100002",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100002",
                            Name = "Bed 2",
                            PatientSerialNumber = "0003",
                            RoomId = "102",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "100003",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100003",
                            Name = "Bed 3",
                            RoomId = "103",
                            RoomSerialNumber = "102"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Building", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Building");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10001",
                            Color = "Orange",
                            Column = 1,
                            Name = "Cardiology",
                            Row = 5,
                            Style = "TriangleBuildingButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "10002",
                            Color = "Red",
                            Column = 3,
                            Name = "Orthopedy",
                            Row = 5,
                            Style = "UBuildingButtonStyle"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingSerialNumber");

                    b.HasIndex("FloorSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "101",
                            RoomSerialNumber = "101",
                            SerialNumber = "73"
                        },
                        new
                        {
                            Id = "12",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "102",
                            RoomSerialNumber = "101",
                            SerialNumber = "74"
                        },
                        new
                        {
                            Id = "13",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "103",
                            RoomSerialNumber = "101",
                            SerialNumber = "75"
                        },
                        new
                        {
                            Id = "14",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "101",
                            RoomSerialNumber = "101",
                            SerialNumber = "76"
                        },
                        new
                        {
                            Id = "15",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Bed",
                            RoomId = "102",
                            RoomSerialNumber = "106",
                            SerialNumber = "77"
                        },
                        new
                        {
                            Id = "16",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "104",
                            RoomSerialNumber = "106",
                            SerialNumber = "78"
                        },
                        new
                        {
                            Id = "17",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "111",
                            RoomSerialNumber = "107",
                            SerialNumber = "79"
                        },
                        new
                        {
                            Id = "18",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "111",
                            RoomSerialNumber = "107",
                            SerialNumber = "80"
                        },
                        new
                        {
                            Id = "19",
                            BuildingSerialNumber = "10002",
                            FloorSerialNumber = "1003",
                            Name = "Bed",
                            RoomId = "112",
                            RoomSerialNumber = "114",
                            SerialNumber = "81"
                        },
                        new
                        {
                            Id = "20",
                            BuildingSerialNumber = "10002",
                            FloorSerialNumber = "1003",
                            Name = "Bed",
                            RoomId = "112",
                            RoomSerialNumber = "114",
                            SerialNumber = "82"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Floor", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Floor");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1001",
                            BuildingSerialNumber = "10001",
                            Name = "Floor1"
                        },
                        new
                        {
                            SerialNumber = "1002",
                            BuildingSerialNumber = "10001",
                            Name = "Floor2"
                        },
                        new
                        {
                            SerialNumber = "1003",
                            BuildingSerialNumber = "10002",
                            Name = "Floor1"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Medicine", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CopyrightName")
                        .HasColumnType("text");

                    b.Property<string>("GenericName")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineManufacturerSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            SerialNumber = "21",
                            CopyrightName = "Brufen",
                            GenericName = "Brufen",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "1",
                            MedicineTypeSerialNumber = "11"
                        },
                        new
                        {
                            SerialNumber = "22",
                            CopyrightName = "Probiotic",
                            GenericName = "Probiotic",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "2",
                            MedicineTypeSerialNumber = "12"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineManufacturer", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineManufacturer");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1",
                            Name = "manufacturer1"
                        },
                        new
                        {
                            SerialNumber = "2",
                            Name = "manufacturer2"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "11",
                            Type = "Antibiotic"
                        },
                        new
                        {
                            SerialNumber = "12",
                            Type = "Brufen"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber")
                        .IsUnique();

                    b.ToTable("Rejection");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnSpan")
                        .HasColumnType("integer");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoomTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<int>("RowSpan")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            SerialNumber = "101",
                            Column = 0,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 101,
                            Name = "Examination room 101",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 3,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "102",
                            Column = 10,
                            ColumnSpan = 4,
                            FloorSerialNumber = "1001",
                            Id = 102,
                            Name = "Examination room 102",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "103",
                            Column = 5,
                            ColumnSpan = 3,
                            FloorSerialNumber = "1001",
                            Id = 103,
                            Name = "Store room 103",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "104",
                            Column = 14,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 104,
                            Name = "Examination room 104",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 3,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "105",
                            Column = 9,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 105,
                            Name = "Store room 105",
                            RoomTypeSerialNumber = "10000002",
                            Row = 10,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "106",
                            Column = 0,
                            ColumnSpan = 7,
                            FloorSerialNumber = "1002",
                            Id = 106,
                            Name = "Operation room 106",
                            RoomTypeSerialNumber = "10000001",
                            Row = 0,
                            RowSpan = 4,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "107",
                            Column = 0,
                            ColumnSpan = 7,
                            FloorSerialNumber = "1002",
                            Id = 107,
                            Name = "Operation room 107",
                            RoomTypeSerialNumber = "10000001",
                            Row = 8,
                            RowSpan = 4,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "108",
                            Column = 10,
                            ColumnSpan = 3,
                            FloorSerialNumber = "1002",
                            Id = 108,
                            Name = "Store room 108",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "109",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 109,
                            Name = "Examination room 109",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "110",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 110,
                            Name = "Operation room 110",
                            RoomTypeSerialNumber = "10000001",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "111",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 111,
                            Name = "Examination room 111",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "112",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 112,
                            Name = "Store room 112",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "113",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 113,
                            Name = "Examination room 113",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "114",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 114,
                            Name = "Examination room 114",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.RoomType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10000001",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "10000002",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "10000003",
                            Name = "Examination room"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagnosticTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("DiagnosticTypeSerialNumber");

                    b.ToTable("DiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("DiagnosticType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("MedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<string>("PatientConditions")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysitianName")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("SpecialistReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.ActionAndBenefitMessage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("ActionID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("ActionID");

                    b.ToTable("ActionAndBenefitMessage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.Api", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Key");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineDosagePharmacy", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("MedicineName")
                        .HasColumnType("text");

                    b.Property<string>("MedicineReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.HasIndex("MedicineReportSerialNumber");

                    b.ToTable("MedicineDosagePharmacy");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicinePharmacy", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicineSpecificationID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("MedicineID");

                    b.ToTable("MedicinePharmacy");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineReport", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.ToTable("MedicineReport");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineSpecification", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .HasColumnType("text");

                    b.Property<string>("Regime")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("ID");

                    b.ToTable("MedicineSpecification");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialnumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Urgency")
                        .HasColumnType("boolean");

                    b.HasKey("SerialNumber");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Active = false,
                            PatientSerialNumber = "0003",
                            PhysicianSerialNumber = "600001",
                            RoomSerialNumber = "101",
                            Urgency = true
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Active = false,
                            PatientSerialNumber = "0002",
                            PhysicianSerialNumber = "600002",
                            RoomSerialNumber = "103",
                            Urgency = false
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "300001",
                            EstimatedTimeInMinutes = 50,
                            Name = "Operation on patient 0002"
                        },
                        new
                        {
                            SerialNumber = "300002",
                            EstimatedTimeInMinutes = 78,
                            Name = "Check on patient 0002"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureTypeEquipmentUsage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureTypeEquipmentUsage");

                    b.HasData(
                        new
                        {
                            SerialNumber = "400001",
                            EquipmentSerialNumber = "81",
                            ProcedureTypeSerialNumber = "300001"
                        },
                        new
                        {
                            SerialNumber = "400002",
                            EquipmentSerialNumber = "82",
                            ProcedureTypeSerialNumber = "300002"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("QuestionText")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "The doctor is welcoming and gentle?",
                            SerialNumber = "1e596336-e8b8-4735-abf5-65297d07a3ce"
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "The doctor answered all of your questions in an understandable manner?",
                            SerialNumber = "8f97977b-c7d2-4620-8b31-d3f4396611d5"
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "The doctor takes care of you in a professional manner?",
                            SerialNumber = "9c6d1aec-9a81-44f6-9e29-91dbf087128d"
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Would you have the procedure done again by this doctor?",
                            SerialNumber = "effeb5b2-6ee7-4f2e-9c44-e4a532e9334c"
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "The personal manner(courtosy,respect,sensitivity,friendliness) of the nurses and other support staff?",
                            SerialNumber = "a9f9f098-1fe0-4c1d-8741-64b87e2bcb41"
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "The nursees answered all of your questions in an understandable manner?",
                            SerialNumber = "34fad81b-fbe0-47e4-b3be-00101f45b8ea"
                        },
                        new
                        {
                            Id = 7,
                            QuestionText = "Orientation given to warn setup",
                            SerialNumber = "6385b0d6-0e6e-465f-9ceb-7e886a218a05"
                        },
                        new
                        {
                            Id = 8,
                            QuestionText = "The nurse gave you good discharge instructions",
                            SerialNumber = "d0bcf4e8-81ea-4d89-9b1a-662672fb5348"
                        },
                        new
                        {
                            Id = 9,
                            QuestionText = "The nurse was concern for you?",
                            SerialNumber = "77ba541b-f950-4efe-85d4-98ecf32630fb"
                        },
                        new
                        {
                            Id = 10,
                            QuestionText = "The comfort and cleanliness of the facility",
                            SerialNumber = "4eb89caa-91be-4085-b921-2c25d8864e23"
                        },
                        new
                        {
                            Id = 11,
                            QuestionText = "Comfort level within the procedure room?",
                            SerialNumber = "32df310d-1bd1-4f73-b7f8-2840bcc5e88d"
                        },
                        new
                        {
                            Id = 12,
                            QuestionText = "Conditions of the rooms(temperature,comfort,silence)",
                            SerialNumber = "3f56aa75-a19f-413b-b111-c7407e731c48"
                        },
                        new
                        {
                            Id = 13,
                            QuestionText = "General impression of the ambient atmosphere",
                            SerialNumber = "968f6ad0-dd24-4266-8b1a-38325176fa31"
                        },
                        new
                        {
                            Id = 14,
                            QuestionText = "Do you think the clinic has the necessary equipment",
                            SerialNumber = "e16a7bd1-b252-49c5-a919-3b0e98078b48"
                        },
                        new
                        {
                            Id = 15,
                            QuestionText = "Do you think the clinic's farmacy has the necessary drugs?",
                            SerialNumber = "85329164-ad38-496f-a1ce-08dc94205c4d"
                        },
                        new
                        {
                            Id = 16,
                            QuestionText = "Do you think that the hospital should have more modern equipment than the current one",
                            SerialNumber = "595a7379-5393-417f-a179-aed7e3da77d7"
                        },
                        new
                        {
                            Id = 17,
                            QuestionText = "Did you noticed broken or damaged equipment in the hospital",
                            SerialNumber = "7a34bc77-cda2-42dc-b34a-cad7f78851fe"
                        },
                        new
                        {
                            Id = 18,
                            QuestionText = "The doctor prescribed medications that I could buy at the clinic's pharmacy",
                            SerialNumber = "70735c00-71ee-4989-aa0d-3febd917e9b6"
                        },
                        new
                        {
                            Id = 19,
                            QuestionText = "Did you found it easy to use our website?",
                            SerialNumber = "a3ec695c-ed89-4290-b0c4-2790076e7088"
                        },
                        new
                        {
                            Id = 20,
                            QuestionText = "Did you have found all the necessary information on our website?",
                            SerialNumber = "730fa57b-3a57-4bc8-a7cb-1b7813c60ef0"
                        },
                        new
                        {
                            Id = 21,
                            QuestionText = "Overall, are you satisfied with the care you received in this facility?",
                            SerialNumber = "8c6d5f63-b8c7-41fa-9afa-be8081087d8b"
                        },
                        new
                        {
                            Id = 22,
                            QuestionText = "Would you come to this institution again",
                            SerialNumber = "f723fc76-5d4c-4ac5-8658-a474f9ed7354"
                        },
                        new
                        {
                            Id = 23,
                            QuestionText = ">Would you recommend this facility to your friends and family",
                            SerialNumber = "0522bdab-028f-40b3-9475-0470d1b3085a"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Survey", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Question1")
                        .HasColumnType("text");

                    b.Property<string>("Question10")
                        .HasColumnType("text");

                    b.Property<string>("Question11")
                        .HasColumnType("text");

                    b.Property<string>("Question12")
                        .HasColumnType("text");

                    b.Property<string>("Question13")
                        .HasColumnType("text");

                    b.Property<string>("Question14")
                        .HasColumnType("text");

                    b.Property<string>("Question15")
                        .HasColumnType("text");

                    b.Property<string>("Question16")
                        .HasColumnType("text");

                    b.Property<string>("Question17")
                        .HasColumnType("text");

                    b.Property<string>("Question18")
                        .HasColumnType("text");

                    b.Property<string>("Question19")
                        .HasColumnType("text");

                    b.Property<string>("Question2")
                        .HasColumnType("text");

                    b.Property<string>("Question20")
                        .HasColumnType("text");

                    b.Property<string>("Question21")
                        .HasColumnType("text");

                    b.Property<string>("Question22")
                        .HasColumnType("text");

                    b.Property<string>("Question23")
                        .HasColumnType("text");

                    b.Property<string>("Question3")
                        .HasColumnType("text");

                    b.Property<string>("Question4")
                        .HasColumnType("text");

                    b.Property<string>("Question5")
                        .HasColumnType("text");

                    b.Property<string>("Question6")
                        .HasColumnType("text");

                    b.Property<string>("Question7")
                        .HasColumnType("text");

                    b.Property<string>("Question8")
                        .HasColumnType("text");

                    b.Property<string>("Question9")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Survey");

                    b.HasData(
                        new
                        {
                            SerialNumber = "abfd6e64-6f86-4e46-a0a9-d90c2ec99776",
                            DoctorName = "Pera Peric",
                            Id = "001",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        },
                        new
                        {
                            SerialNumber = "619a2011-2c3e-44e2-9c31-67f87591e076",
                            DoctorName = "Mika Mikic",
                            Id = "005",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CitySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CitySerialNumber");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Street = "Njegoševa 45"
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Street = "Njegoševa 46"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CountrySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CountrySerialNumber");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Country", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("PhysicianSerialNumber", "SpecializationSerialNumber");

                    b.HasIndex("SpecializationSerialNumber");

                    b.ToTable("PhysicianSpecialization");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MedicineDosageSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicineDosageSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("PrescriptionMedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticReferralSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticReferralSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportDiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FollowUpSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportFollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportPrescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistReferralSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportSerialNumber");

                    b.HasIndex("SpecialistReferralSerialNumber")
                        .IsUnique();

                    b.ToTable("ReportSpecialistReferral");
                });

            modelBuilder.Entity("Model.Accounts.Physician", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.ToTable("Physician");

                    b.HasData(
                        new
                        {
                            SerialNumber = "600001",
                            AddressSerialNumber = "200001",
                            Contact = "Simic kontakt",
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simic@gmail.com",
                            Id = "600001",
                            Name = "Gojko",
                            Password = "sifraSimic24dsf1",
                            Surname = "Simic"
                        },
                        new
                        {
                            SerialNumber = "600002",
                            AddressSerialNumber = "200002",
                            Contact = "Dicic kontakt",
                            DateOfBirth = new DateTime(1985, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dicic@gmail.com",
                            Id = "600002",
                            Name = "Klara",
                            Password = "sifraDicic98754",
                            Surname = "Dicic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "ChosenPhysician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Model.Hospital.Rejection", "MedicineSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", "DiagnosticType")
                        .WithMany()
                        .HasForeignKey("DiagnosticTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", null)
                        .WithMany("MedicineDosage")
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineDosagePharmacy", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineReport", null)
                        .WithMany("Dosage")
                        .HasForeignKey("MedicineReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.OwnsOne("HealthClinicBackend.Backend.Model.Util.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<string>("AppointmentSerialNumber")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentSerialNumber");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentSerialNumber");

                            b1.HasData(
                                new
                                {
                                    AppointmentSerialNumber = "200001",
                                    End = new DateTime(2020, 12, 14, 18, 13, 57, 285, DateTimeKind.Local).AddTicks(9213),
                                    Start = new DateTime(2020, 12, 14, 18, 13, 57, 283, DateTimeKind.Local).AddTicks(2711)
                                },
                                new
                                {
                                    AppointmentSerialNumber = "200002",
                                    End = new DateTime(2020, 12, 14, 18, 13, 57, 286, DateTimeKind.Local).AddTicks(531),
                                    Start = new DateTime(2020, 12, 14, 18, 13, 57, 286, DateTimeKind.Local).AddTicks(513)
                                });
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.City", "City")
                        .WithMany()
                        .HasForeignKey("CitySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountrySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", "MedicineDosage")
                        .WithMany()
                        .HasForeignKey("MedicineDosageSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", "DiagnosticReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", "DiagnosticReferralSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", "FollowUp")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", "FollowUpSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", "PrescriptionSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", "SpecialistReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", "SpecialistReferralSerialNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
