// <auto-generated />
using System;
using HealthClinicBackend.Backend.Repository.DatabaseSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HealthClinicBackend.Migrations
{
    [DbContext(typeof(HealthCareSystemDbContext))]
    [Migration("20201214212347_mig1")]
    partial class mig1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Citizenship")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmploymentStatus")
                        .HasColumnType("text");

                    b.Property<string>("FamilyDiseases")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<bool>("Guest")
                        .HasColumnType("boolean");

                    b.Property<string>("HealthInsuranceNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<string>("MaritalStatus")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("MunicipalityOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .HasColumnType("text");

                    b.Property<string>("ParentName")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("PersonalDiseases")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("PlaceOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("StateOfBirth")
                        .HasColumnType("text");

                    b.Property<string>("StateOfResidence")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("Patient");

                    b.HasData(
                        new
                        {
                            SerialNumber = "0002",
                            Contact = "kontakt",
                            DateOfBirth = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0002",
                            Name = "Jelena",
                            ParentName = "otac",
                            Password = "sifra",
                            Surname = "Tanjic"
                        },
                        new
                        {
                            SerialNumber = "0003",
                            Contact = "kontaktMica",
                            DateOfBirth = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emailMica",
                            EmailConfirmed = false,
                            Gender = "Zensko",
                            Guest = true,
                            Id = "0003",
                            Name = "Sara",
                            ParentName = "mama",
                            Password = "sifraMica",
                            Surname = "Milic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("AddressSerialNumber");

                    b.ToTable("Secretary");

                    b.HasData(
                        new
                        {
                            SerialNumber = "123a",
                            AddressSerialNumber = "200001",
                            DateOfBirth = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Id = "111",
                            Name = "Marko",
                            Surname = "Markovic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Specialization", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Specialization");

                    b.HasData(
                        new
                        {
                            SerialNumber = "500001",
                            Name = "Neurosurgeon "
                        },
                        new
                        {
                            SerialNumber = "500002",
                            Name = "Family doctor"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Approved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedback");

                    b.HasData(
                        new
                        {
                            SerialNumber = "e28a5af3-4c35-40e3-9808-13dcd3effacc",
                            Approved = true,
                            Date = new DateTime(2016, 11, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "super"
                        },
                        new
                        {
                            SerialNumber = "c760a97b-0794-4b84-9ac2-c4a6529c4da1",
                            Approved = false,
                            Date = new DateTime(2015, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0001",
                            Text = "onako"
                        },
                        new
                        {
                            SerialNumber = "be5b1890-ae99-4f63-b714-4419c693db49",
                            Approved = true,
                            Date = new DateTime(2018, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0002",
                            Text = "moze bolje"
                        },
                        new
                        {
                            SerialNumber = "708ba1a0-9508-4543-8c3f-3f9f3894c82b",
                            Approved = false,
                            Date = new DateTime(2019, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0003",
                            Text = "dobro"
                        },
                        new
                        {
                            SerialNumber = "da9ad15c-9abf-4755-b1ee-74f25bfd1a05",
                            Approved = true,
                            Date = new DateTime(2019, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0007",
                            Text = "nikako"
                        },
                        new
                        {
                            SerialNumber = "8ea9daa4-9265-48f6-a668-3fc101648b4e",
                            Approved = false,
                            Date = new DateTime(2019, 12, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0008",
                            Text = "sve pohvale"
                        },
                        new
                        {
                            SerialNumber = "d275777c-5c31-4931-b725-5b1bbfb3f8ed",
                            Approved = true,
                            Date = new DateTime(2020, 3, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "00010",
                            Text = "usluga na nivou"
                        },
                        new
                        {
                            SerialNumber = "3340cffd-1642-48b9-864b-67db8ad5add6",
                            Approved = false,
                            Date = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PatientId = "0004",
                            Text = "ok"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Bed");

                    b.HasData(
                        new
                        {
                            SerialNumber = "100001",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100001",
                            Name = "Bed 1",
                            PatientSerialNumber = "0002",
                            RoomId = "101",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "100002",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100002",
                            Name = "Bed 2",
                            PatientSerialNumber = "0003",
                            RoomId = "102",
                            RoomSerialNumber = "101"
                        },
                        new
                        {
                            SerialNumber = "100003",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Id = "100003",
                            Name = "Bed 3",
                            RoomId = "103",
                            RoomSerialNumber = "102"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Building", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Building");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10001",
                            Color = "Orange",
                            Column = 1,
                            Name = "Cardiology",
                            Row = 5,
                            Style = "TriangleBuildingButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "10002",
                            Color = "Red",
                            Column = 3,
                            Name = "Orthopedy",
                            Row = 5,
                            Style = "UBuildingButtonStyle"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoomId")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BuildingSerialNumber");

                    b.HasIndex("FloorSerialNumber");

                    b.HasIndex("RoomSerialNumber");

                    b.ToTable("Equipment");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "101",
                            RoomSerialNumber = "101",
                            SerialNumber = "73"
                        },
                        new
                        {
                            Id = "12",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "102",
                            RoomSerialNumber = "101",
                            SerialNumber = "74"
                        },
                        new
                        {
                            Id = "13",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "103",
                            RoomSerialNumber = "101",
                            SerialNumber = "75"
                        },
                        new
                        {
                            Id = "14",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1001",
                            Name = "Bed",
                            RoomId = "101",
                            RoomSerialNumber = "101",
                            SerialNumber = "76"
                        },
                        new
                        {
                            Id = "15",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Bed",
                            RoomId = "102",
                            RoomSerialNumber = "106",
                            SerialNumber = "77"
                        },
                        new
                        {
                            Id = "16",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "104",
                            RoomSerialNumber = "106",
                            SerialNumber = "78"
                        },
                        new
                        {
                            Id = "17",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "111",
                            RoomSerialNumber = "107",
                            SerialNumber = "79"
                        },
                        new
                        {
                            Id = "18",
                            BuildingSerialNumber = "10001",
                            FloorSerialNumber = "1002",
                            Name = "Table",
                            RoomId = "111",
                            RoomSerialNumber = "107",
                            SerialNumber = "80"
                        },
                        new
                        {
                            Id = "19",
                            BuildingSerialNumber = "10002",
                            FloorSerialNumber = "1003",
                            Name = "Bed",
                            RoomId = "112",
                            RoomSerialNumber = "114",
                            SerialNumber = "81"
                        },
                        new
                        {
                            Id = "20",
                            BuildingSerialNumber = "10002",
                            FloorSerialNumber = "1003",
                            Name = "Bed",
                            RoomId = "112",
                            RoomSerialNumber = "114",
                            SerialNumber = "82"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Floor", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("BuildingSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Floor");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1001",
                            BuildingSerialNumber = "10001",
                            Name = "Floor1"
                        },
                        new
                        {
                            SerialNumber = "1002",
                            BuildingSerialNumber = "10001",
                            Name = "Floor2"
                        },
                        new
                        {
                            SerialNumber = "1003",
                            BuildingSerialNumber = "10002",
                            Name = "Floor1"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Medicine", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CopyrightName")
                        .HasColumnType("text");

                    b.Property<string>("GenericName")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<string>("MedicineManufacturerSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Medicine");

                    b.HasData(
                        new
                        {
                            SerialNumber = "21",
                            CopyrightName = "Brufen",
                            GenericName = "Brufen",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "1",
                            MedicineTypeSerialNumber = "11"
                        },
                        new
                        {
                            SerialNumber = "22",
                            CopyrightName = "Probiotic",
                            GenericName = "Probiotic",
                            IsApproved = false,
                            MedicineManufacturerSerialNumber = "2",
                            MedicineTypeSerialNumber = "12"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineManufacturer", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineManufacturer");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1",
                            Name = "manufacturer1"
                        },
                        new
                        {
                            SerialNumber = "2",
                            Name = "manufacturer2"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.MedicineType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "11",
                            Type = "Antibiotic"
                        },
                        new
                        {
                            SerialNumber = "12",
                            Type = "Brufen"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber")
                        .IsUnique();

                    b.ToTable("Rejection");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Room", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Column")
                        .HasColumnType("integer");

                    b.Property<int>("ColumnSpan")
                        .HasColumnType("integer");

                    b.Property<string>("FloorSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("RoomTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Row")
                        .HasColumnType("integer");

                    b.Property<int>("RowSpan")
                        .HasColumnType("integer");

                    b.Property<string>("Style")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Room");

                    b.HasData(
                        new
                        {
                            SerialNumber = "101",
                            Column = 0,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 101,
                            Name = "Examination room 101",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 3,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "102",
                            Column = 10,
                            ColumnSpan = 4,
                            FloorSerialNumber = "1001",
                            Id = 102,
                            Name = "Examination room 102",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "103",
                            Column = 5,
                            ColumnSpan = 3,
                            FloorSerialNumber = "1001",
                            Id = 103,
                            Name = "Store room 103",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "104",
                            Column = 14,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 104,
                            Name = "Examination room 104",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 3,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "105",
                            Column = 9,
                            ColumnSpan = 5,
                            FloorSerialNumber = "1001",
                            Id = 105,
                            Name = "Store room 105",
                            RoomTypeSerialNumber = "10000002",
                            Row = 10,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "106",
                            Column = 0,
                            ColumnSpan = 7,
                            FloorSerialNumber = "1002",
                            Id = 106,
                            Name = "Operation room 106",
                            RoomTypeSerialNumber = "10000001",
                            Row = 0,
                            RowSpan = 4,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "107",
                            Column = 0,
                            ColumnSpan = 7,
                            FloorSerialNumber = "1002",
                            Id = 107,
                            Name = "Operation room 107",
                            RoomTypeSerialNumber = "10000001",
                            Row = 8,
                            RowSpan = 4,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "108",
                            Column = 10,
                            ColumnSpan = 3,
                            FloorSerialNumber = "1002",
                            Id = 108,
                            Name = "Store room 108",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 2,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "109",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 109,
                            Name = "Examination room 109",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "110",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 110,
                            Name = "Operation room 110",
                            RoomTypeSerialNumber = "10000001",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "111",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 111,
                            Name = "Examination room 111",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "112",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 112,
                            Name = "Store room 112",
                            RoomTypeSerialNumber = "10000002",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "113",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 113,
                            Name = "Examination room 113",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        },
                        new
                        {
                            SerialNumber = "114",
                            Column = 0,
                            ColumnSpan = 0,
                            FloorSerialNumber = "1003",
                            Id = 114,
                            Name = "Examination room 114",
                            RoomTypeSerialNumber = "10000003",
                            Row = 0,
                            RowSpan = 0,
                            Style = "RoomButtonStyle"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.RoomType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("RoomType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10000001",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "10000002",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "10000003",
                            Name = "Examination room"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("DiagnosticTypeSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("DiagnosticTypeSerialNumber");

                    b.ToTable("DiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("DiagnosticType");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.ToTable("FollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<double>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("MedicineSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("MedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Prescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Findings")
                        .HasColumnType("text");

                    b.Property<string>("PatientConditions")
                        .HasColumnType("text");

                    b.Property<string>("PatientId")
                        .HasColumnType("text");

                    b.Property<string>("PatientName")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysitianName")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PatientId");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("PhysicianSerialNumber");

                    b.HasIndex("ProcedureTypeSerialNumber");

                    b.ToTable("SpecialistReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.ActionAndBenefitMessage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<Guid>("ActionID")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateFrom")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateTo")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("ActionID");

                    b.ToTable("ActionAndBenefitMessage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.Api", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PharmacyName")
                        .HasColumnType("text");

                    b.Property<bool>("Subscribed")
                        .HasColumnType("boolean");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Key");

                    b.ToTable("Apis");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineDosagePharmacy", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("Amount")
                        .HasColumnType("integer");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<string>("MedicineName")
                        .HasColumnType("text");

                    b.Property<string>("MedicineReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.HasIndex("MedicineReportSerialNumber");

                    b.ToTable("MedicineDosagePharmacy");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicinePharmacy", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("MedicineID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MedicineSpecificationID")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("MedicineID");

                    b.ToTable("MedicinePharmacy");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineReport", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.ToTable("MedicineReport");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineSpecification", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Content")
                        .HasColumnType("text");

                    b.Property<string>("ID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Producer")
                        .HasColumnType("text");

                    b.Property<string>("Regime")
                        .HasColumnType("text");

                    b.Property<string>("Shape")
                        .HasColumnType("text");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("ID");

                    b.ToTable("MedicineSpecification");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean");

                    b.Property<string>("PatientSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialnumber")
                        .HasColumnType("text");

                    b.Property<string>("RoomSerialNumber")
                        .HasColumnType("text");

                    b.Property<bool>("Urgency")
                        .HasColumnType("boolean");

                    b.HasKey("SerialNumber");

                    b.ToTable("Appointment");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Active = false,
                            PatientSerialNumber = "0003",
                            PhysicianSerialNumber = "600001",
                            RoomSerialNumber = "101",
                            Urgency = true
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Active = false,
                            PatientSerialNumber = "0002",
                            PhysicianSerialNumber = "600002",
                            RoomSerialNumber = "103",
                            Urgency = false
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<int>("EstimatedTimeInMinutes")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureType");

                    b.HasData(
                        new
                        {
                            SerialNumber = "300001",
                            EstimatedTimeInMinutes = 50,
                            Name = "Operation on patient 0002"
                        },
                        new
                        {
                            SerialNumber = "300002",
                            EstimatedTimeInMinutes = 78,
                            Name = "Check on patient 0002"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.ProcedureTypeEquipmentUsage", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("EquipmentSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProcedureTypeSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("ProcedureTypeEquipmentUsage");

                    b.HasData(
                        new
                        {
                            SerialNumber = "400001",
                            EquipmentSerialNumber = "81",
                            ProcedureTypeSerialNumber = "300001"
                        },
                        new
                        {
                            SerialNumber = "400002",
                            EquipmentSerialNumber = "82",
                            ProcedureTypeSerialNumber = "300002"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("QuestionText")
                        .HasColumnType("text");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "The doctor is welcoming and gentle?",
                            SerialNumber = "b1bf24ce-9657-4449-9450-f2a24ca61af9"
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "The doctor answered all of your questions in an understandable manner?",
                            SerialNumber = "57818b64-cb08-4773-a1e0-3807da2d1b05"
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "The doctor takes care of you in a professional manner?",
                            SerialNumber = "2c7aae01-5532-48ce-9059-4c6c37ff3cd1"
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Would you have the procedure done again by this doctor?",
                            SerialNumber = "2f2b9f3f-1c1b-40e2-a12a-a4b201a17db9"
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "The personal manner(courtosy,respect,sensitivity,friendliness) of the nurses and other support staff?",
                            SerialNumber = "0836de93-86ca-4379-a580-c6dff7ebf17e"
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "The nursees answered all of your questions in an understandable manner?",
                            SerialNumber = "18caf1a9-d233-4616-b080-21bd81f199be"
                        },
                        new
                        {
                            Id = 7,
                            QuestionText = "Orientation given to warn setup",
                            SerialNumber = "88092ec0-db78-4ad2-b20e-528fbb81c7e9"
                        },
                        new
                        {
                            Id = 8,
                            QuestionText = "The nurse gave you good discharge instructions",
                            SerialNumber = "0fd26044-bcc6-4cdb-8c73-4bd2746a2aed"
                        },
                        new
                        {
                            Id = 9,
                            QuestionText = "The nurse was concern for you?",
                            SerialNumber = "1633c156-1602-4bae-abb7-e91280b7048d"
                        },
                        new
                        {
                            Id = 10,
                            QuestionText = "The comfort and cleanliness of the facility",
                            SerialNumber = "00af91c3-c25e-4175-a78e-9b058fb29b52"
                        },
                        new
                        {
                            Id = 11,
                            QuestionText = "Comfort level within the procedure room?",
                            SerialNumber = "99277216-4604-434d-b55f-86b586e29cd3"
                        },
                        new
                        {
                            Id = 12,
                            QuestionText = "Conditions of the rooms(temperature,comfort,silence)",
                            SerialNumber = "1a75c498-c3bb-4fd2-a8ef-1e046a007e2b"
                        },
                        new
                        {
                            Id = 13,
                            QuestionText = "General impression of the ambient atmosphere",
                            SerialNumber = "3d711f9c-d08b-4c7d-bb9c-f0cec2ed2ae8"
                        },
                        new
                        {
                            Id = 14,
                            QuestionText = "Do you think the clinic has the necessary equipment",
                            SerialNumber = "d56fedf0-707f-4da4-afdb-eb7585540832"
                        },
                        new
                        {
                            Id = 15,
                            QuestionText = "Do you think the clinic's farmacy has the necessary drugs?",
                            SerialNumber = "a223d002-ea90-4134-bbb3-1bf641a53781"
                        },
                        new
                        {
                            Id = 16,
                            QuestionText = "Do you think that the hospital should have more modern equipment than the current one",
                            SerialNumber = "771de7d5-305f-4c60-9095-156c6b725d0f"
                        },
                        new
                        {
                            Id = 17,
                            QuestionText = "Did you noticed broken or damaged equipment in the hospital",
                            SerialNumber = "74a27912-e2e6-4dfa-89a3-42755597766e"
                        },
                        new
                        {
                            Id = 18,
                            QuestionText = "The doctor prescribed medications that I could buy at the clinic's pharmacy",
                            SerialNumber = "c7f553e9-17ae-4f25-aab8-955e53e3c1bc"
                        },
                        new
                        {
                            Id = 19,
                            QuestionText = "Did you found it easy to use our website?",
                            SerialNumber = "81667430-d906-416e-9683-85afc7936fcf"
                        },
                        new
                        {
                            Id = 20,
                            QuestionText = "Did you have found all the necessary information on our website?",
                            SerialNumber = "0feeb7a7-560b-4c74-a1aa-b0bb8226d3fa"
                        },
                        new
                        {
                            Id = 21,
                            QuestionText = "Overall, are you satisfied with the care you received in this facility?",
                            SerialNumber = "c556d5f5-17ea-4189-8b7e-c36b4e6deaf9"
                        },
                        new
                        {
                            Id = 22,
                            QuestionText = "Would you come to this institution again",
                            SerialNumber = "5c5d0f9d-2664-44db-b2bb-74db1c02321b"
                        },
                        new
                        {
                            Id = 23,
                            QuestionText = ">Would you recommend this facility to your friends and family",
                            SerialNumber = "8edc821b-add7-4482-8775-501206d6592f"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Survey.Survey", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("DoctorName")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Question1")
                        .HasColumnType("text");

                    b.Property<string>("Question10")
                        .HasColumnType("text");

                    b.Property<string>("Question11")
                        .HasColumnType("text");

                    b.Property<string>("Question12")
                        .HasColumnType("text");

                    b.Property<string>("Question13")
                        .HasColumnType("text");

                    b.Property<string>("Question14")
                        .HasColumnType("text");

                    b.Property<string>("Question15")
                        .HasColumnType("text");

                    b.Property<string>("Question16")
                        .HasColumnType("text");

                    b.Property<string>("Question17")
                        .HasColumnType("text");

                    b.Property<string>("Question18")
                        .HasColumnType("text");

                    b.Property<string>("Question19")
                        .HasColumnType("text");

                    b.Property<string>("Question2")
                        .HasColumnType("text");

                    b.Property<string>("Question20")
                        .HasColumnType("text");

                    b.Property<string>("Question21")
                        .HasColumnType("text");

                    b.Property<string>("Question22")
                        .HasColumnType("text");

                    b.Property<string>("Question23")
                        .HasColumnType("text");

                    b.Property<string>("Question3")
                        .HasColumnType("text");

                    b.Property<string>("Question4")
                        .HasColumnType("text");

                    b.Property<string>("Question5")
                        .HasColumnType("text");

                    b.Property<string>("Question6")
                        .HasColumnType("text");

                    b.Property<string>("Question7")
                        .HasColumnType("text");

                    b.Property<string>("Question8")
                        .HasColumnType("text");

                    b.Property<string>("Question9")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Survey");

                    b.HasData(
                        new
                        {
                            SerialNumber = "cfe631b4-915f-432d-8f4b-3c672605224e",
                            DoctorName = "Pera Peric",
                            Id = "001",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        },
                        new
                        {
                            SerialNumber = "f289ed44-f7eb-44cb-bc34-cb3620086bcd",
                            DoctorName = "Mika Mikic",
                            Id = "005",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CitySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CitySerialNumber");

                    b.ToTable("Address");

                    b.HasData(
                        new
                        {
                            SerialNumber = "200001",
                            Street = "Njegoševa 45"
                        },
                        new
                        {
                            SerialNumber = "200002",
                            Street = "Njegoševa 46"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("CountrySerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasIndex("CountrySerialNumber");

                    b.ToTable("City");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Country", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.Property<string>("PhysicianSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecializationSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("PhysicianSerialNumber", "SpecializationSerialNumber");

                    b.HasIndex("SpecializationSerialNumber");

                    b.ToTable("PhysicianSpecialization");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("MedicineDosageSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MedicineDosageSerialNumber");

                    b.HasIndex("PrescriptionSerialNumber");

                    b.ToTable("PrescriptionMedicineDosage");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("DiagnosticReferralSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticReferralSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportDiagnosticReferral");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("FollowUpSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("FollowUpSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportFollowUp");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("PrescriptionSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("PrescriptionSerialNumber")
                        .IsUnique();

                    b.HasIndex("ReportSerialNumber");

                    b.ToTable("ReportPrescription");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ReportSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("SpecialistReferralSerialNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ReportSerialNumber");

                    b.HasIndex("SpecialistReferralSerialNumber")
                        .IsUnique();

                    b.ToTable("ReportSpecialistReferral");
                });

            modelBuilder.Entity("Model.Accounts.Physician", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("AddressSerialNumber")
                        .HasColumnType("text");

                    b.Property<string>("Contact")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("Id")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .HasColumnType("text");

                    b.HasKey("SerialNumber");

                    b.HasAlternateKey("Id");

                    b.ToTable("Physician");

                    b.HasData(
                        new
                        {
                            SerialNumber = "600001",
                            AddressSerialNumber = "200001",
                            Contact = "Simic kontakt",
                            DateOfBirth = new DateTime(1975, 11, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "simic@gmail.com",
                            Id = "600001",
                            Name = "Gojko",
                            Password = "sifraSimic24dsf1",
                            Surname = "Simic"
                        },
                        new
                        {
                            SerialNumber = "600002",
                            AddressSerialNumber = "200002",
                            Contact = "Dicic kontakt",
                            DateOfBirth = new DateTime(1985, 4, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "dicic@gmail.com",
                            Id = "600002",
                            Name = "Klara",
                            Password = "sifraDicic98754",
                            Surname = "Dicic"
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Patient", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "ChosenPhysician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Accounts.Secretary", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Bed", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", null)
                        .WithMany("Beds")
                        .HasForeignKey("RoomSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Equipment", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Room", "Room")
                        .WithMany()
                        .HasForeignKey("RoomSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Hospital.Rejection", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Model.Hospital.Rejection", "MedicineSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticType", "DiagnosticType")
                        .WithMany()
                        .HasForeignKey("DiagnosticTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Hospital.Medicine", "Medicine")
                        .WithMany()
                        .HasForeignKey("MedicineSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", null)
                        .WithMany("MedicineDosage")
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.Report", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("PatientId");

                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.Schedule.ProcedureType", "ProcedureType")
                        .WithMany()
                        .HasForeignKey("ProcedureTypeSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineDosagePharmacy", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.PharmacySupport.MedicineReport", null)
                        .WithMany("Dosage")
                        .HasForeignKey("MedicineReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Schedule.Appointment", b =>
                {
                    b.OwnsOne("HealthClinicBackend.Backend.Model.Util.TimeInterval", "TimeInterval", b1 =>
                        {
                            b1.Property<string>("AppointmentSerialNumber")
                                .HasColumnType("text");

                            b1.Property<DateTime>("End")
                                .HasColumnType("timestamp without time zone");

                            b1.Property<string>("Id")
                                .HasColumnType("text");

                            b1.Property<DateTime>("Start")
                                .HasColumnType("timestamp without time zone");

                            b1.HasKey("AppointmentSerialNumber");

                            b1.ToTable("Appointment");

                            b1.WithOwner()
                                .HasForeignKey("AppointmentSerialNumber");

                            b1.HasData(
                                new
                                {
                                    AppointmentSerialNumber = "200001",
                                    End = new DateTime(2020, 12, 14, 22, 23, 46, 159, DateTimeKind.Local).AddTicks(925),
                                    Start = new DateTime(2020, 12, 14, 22, 23, 46, 152, DateTimeKind.Local).AddTicks(8560)
                                },
                                new
                                {
                                    AppointmentSerialNumber = "200002",
                                    End = new DateTime(2020, 12, 14, 22, 23, 46, 159, DateTimeKind.Local).AddTicks(2920),
                                    Start = new DateTime(2020, 12, 14, 22, 23, 46, 159, DateTimeKind.Local).AddTicks(2889)
                                });
                        });
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.Address", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.City", "City")
                        .WithMany()
                        .HasForeignKey("CitySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Model.Util.City", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.Util.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountrySerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PhysicianSpecialization", b =>
                {
                    b.HasOne("Model.Accounts.Physician", "Physician")
                        .WithMany()
                        .HasForeignKey("PhysicianSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HealthClinicBackend.Backend.Model.Accounts.Specialization", "Specialization")
                        .WithMany()
                        .HasForeignKey("SpecializationSerialNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.PrescriptionMedicineDosage", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.MedicineDosage", "MedicineDosage")
                        .WithMany()
                        .HasForeignKey("MedicineDosageSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.DiagnosticReferral", "DiagnosticReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportDiagnosticReferral", "DiagnosticReferralSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.FollowUp", "FollowUp")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportFollowUp", "FollowUpSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Prescription", "Prescription")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportPrescription", "PrescriptionSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");
                });

            modelBuilder.Entity("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", b =>
                {
                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.Report", "Report")
                        .WithMany()
                        .HasForeignKey("ReportSerialNumber");

                    b.HasOne("HealthClinicBackend.Backend.Model.MedicalExam.SpecialistReferral", "SpecialistReferral")
                        .WithOne()
                        .HasForeignKey("HealthClinicBackend.Backend.Repository.DatabaseSql.RelationHelpers.ReportSpecialistReferral", "SpecialistReferralSerialNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
