// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication.Backend.Model;

namespace WebApplication.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201123170325_migracija10")]
    partial class migracija10
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Accounts.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Guest")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = "0002",
                            Contact = "kontakt",
                            DateOfBirth = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email",
                            Gender = "Zensko",
                            Guest = true,
                            Name = "Jelena",
                            ParentName = "otac",
                            SerialNumber = "e1646f09-3a92-443f-88c4-099e49c849d8",
                            Surname = "Tanjic"
                        },
                        new
                        {
                            Id = "0003",
                            Contact = "kontaktMica",
                            DateOfBirth = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emailMica",
                            Gender = "Zensko",
                            Guest = true,
                            Name = "Sara",
                            ParentName = "mama",
                            SerialNumber = "ccd5d784-45bc-47ea-aa5a-0acf2e5f68aa",
                            Surname = "Milic"
                        });
                });

            modelBuilder.Entity("Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatientId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Model.MedicalExam.Report", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Findings")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PatientConditions")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PatientId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PatientName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("PhysitianName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Reports");

                    b.HasData(
                        new
                        {
                            SerialNumber = "ce76b5fc-6cbe-4e45-ab37-173a964cc39b",
                            PatientId = "0002",
                            PatientName = "Mika Mikic",
                            PhysitianName = "Pera Peric"
                        },
                        new
                        {
                            SerialNumber = "032e21b0-b12e-49f5-a5d1-f3167a171d0d",
                            PatientId = "0002",
                            PatientName = "Mika Mikic",
                            PhysitianName = "Nikola Nikolic"
                        },
                        new
                        {
                            SerialNumber = "55ee62a0-227c-4f0f-b6d2-d127ebb8ce1f",
                            PatientId = "0002",
                            PatientName = "Mika Mikic",
                            PhysitianName = "Bole Bolevic"
                        },
                        new
                        {
                            SerialNumber = "73baa9f4-7ba7-4d91-9296-1342d3327a37",
                            PatientId = "0003",
                            PatientName = "Ana Anic",
                            PhysitianName = "Petar Petovic"
                        },
                        new
                        {
                            SerialNumber = "509b7c29-23ce-41de-bb2c-f452ca7192da",
                            PatientId = "0003",
                            PatientName = "Ana Anic",
                            PhysitianName = "Bole Bolevic"
                        });
                });

            modelBuilder.Entity("health_clinic_class_diagram.Backend.Model.Survey.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("QuestionText")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            QuestionText = "The doctor is welcoming and gentle?"
                        },
                        new
                        {
                            Id = 2,
                            QuestionText = "The doctor answered all of your questions in an understandable manner?"
                        },
                        new
                        {
                            Id = 3,
                            QuestionText = "The doctor takes care of you in a professional manner?"
                        },
                        new
                        {
                            Id = 4,
                            QuestionText = "Would you have the procedure done again by this doctor?"
                        },
                        new
                        {
                            Id = 5,
                            QuestionText = "The personal manner(courtosy,respect,sensitivity,friendliness) of the nurses and other support staff?"
                        },
                        new
                        {
                            Id = 6,
                            QuestionText = "The nursees answered all of your questions in an understandable manner?"
                        },
                        new
                        {
                            Id = 7,
                            QuestionText = "Orientation given to warn setup"
                        },
                        new
                        {
                            Id = 8,
                            QuestionText = "The nurse gave you good discharge instructions"
                        },
                        new
                        {
                            Id = 9,
                            QuestionText = "The nurse was concern for you?"
                        },
                        new
                        {
                            Id = 10,
                            QuestionText = "The comfort and cleanliness of the facility"
                        },
                        new
                        {
                            Id = 11,
                            QuestionText = "Comfort level within the procedure room?"
                        },
                        new
                        {
                            Id = 12,
                            QuestionText = "Conditions of the rooms(temperature,comfort,silence)"
                        },
                        new
                        {
                            Id = 13,
                            QuestionText = "General impression of the ambient atmosphere"
                        },
                        new
                        {
                            Id = 14,
                            QuestionText = "Do you think the clinic has the necessary equipment"
                        },
                        new
                        {
                            Id = 15,
                            QuestionText = "Do you think the clinic's farmacy has the necessary drugs?"
                        },
                        new
                        {
                            Id = 16,
                            QuestionText = "Do you think that the hospital should have more modern equipment than the current one"
                        },
                        new
                        {
                            Id = 17,
                            QuestionText = "Did you noticed broken or damaged equipment in the hospital"
                        },
                        new
                        {
                            Id = 18,
                            QuestionText = "The doctor prescribed medications that I could buy at the clinic's pharmacy"
                        },
                        new
                        {
                            Id = 19,
                            QuestionText = "Did you found it easy to use our website?"
                        },
                        new
                        {
                            Id = 20,
                            QuestionText = "Did you have found all the necessary information on our website?"
                        },
                        new
                        {
                            Id = 21,
                            QuestionText = "Overall, are you satisfied with the care you received in this facility?"
                        },
                        new
                        {
                            Id = 22,
                            QuestionText = "Would you come to this institution again"
                        },
                        new
                        {
                            Id = 23,
                            QuestionText = ">Would you recommend this facility to your friends and family"
                        });
                });

            modelBuilder.Entity("health_clinic_class_diagram.Backend.Model.Survey.Survey", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("DoctorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ID")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question1")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question10")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question11")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question12")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question13")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question14")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question15")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question16")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question17")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question18")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question19")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question2")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question20")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question21")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question22")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question23")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question3")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question4")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question5")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question6")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question7")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question8")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Question9")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Surveys");

                    b.HasData(
                        new
                        {
                            SerialNumber = "9918e6d2-b9b4-48e5-948e-a67a58e9873c",
                            DoctorName = "Pera Peric",
                            ID = "001",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        },
                        new
                        {
                            SerialNumber = "b051bcd1-8f03-4dfc-abf6-d6eda4548dfd",
                            DoctorName = "Mika Mikic",
                            ID = "005",
                            Question1 = "5",
                            Question10 = "5",
                            Question11 = "2",
                            Question12 = "5",
                            Question13 = "5",
                            Question14 = "5",
                            Question15 = "5",
                            Question16 = "5",
                            Question17 = "5",
                            Question18 = "5",
                            Question19 = "5",
                            Question2 = "5",
                            Question20 = "5",
                            Question21 = "3",
                            Question22 = "2",
                            Question23 = "4",
                            Question3 = "5",
                            Question4 = "5",
                            Question5 = "4",
                            Question6 = "3",
                            Question7 = "5",
                            Question8 = "5",
                            Question9 = "1"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
