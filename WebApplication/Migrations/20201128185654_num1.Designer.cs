// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebApplication.Backend.Model;

namespace WebApplication.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20201128185654_num1")]
    partial class num1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Model.Accounts.Patient", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Contact")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Gender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("Guest")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("ParentName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Surname")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Patients");

                    b.HasData(
                        new
                        {
                            Id = "0002",
                            Contact = "kontakt",
                            DateOfBirth = new DateTime(2017, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "email",
                            Gender = "Zensko",
                            Guest = true,
                            Name = "Jelena",
                            ParentName = "otac",
                            SerialNumber = "c3e49d18-55f3-4672-bfb6-e3c3de423fb4",
                            Surname = "Tanjic"
                        },
                        new
                        {
                            Id = "0003",
                            Contact = "kontaktMica",
                            DateOfBirth = new DateTime(2018, 1, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "emailMica",
                            Gender = "Zensko",
                            Guest = true,
                            Name = "Sara",
                            ParentName = "mama",
                            SerialNumber = "474e9f09-e3c9-490c-930b-00d7caec5c71",
                            Surname = "Milic"
                        });
                });

            modelBuilder.Entity("Model.Blog.Feedback", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<bool>("Approved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PatientId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Text")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("Model.Hospital.Equipment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("RoomId")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("Equipments");

                    b.HasData(
                        new
                        {
                            Id = "11",
                            Name = "Bed",
                            RoomId = "101",
                            SerialNumber = "11"
                        });
                });

            modelBuilder.Entity("Model.Hospital.Medicine", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("CopyrightName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("GenericName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("MedicineManufacturerSerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("MedicineTypeSerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.HasIndex("MedicineManufacturerSerialNumber");

                    b.HasIndex("MedicineTypeSerialNumber");

                    b.ToTable("Medicine");
                });

            modelBuilder.Entity("Model.Hospital.MedicineManufacturer", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineManufacturers");
                });

            modelBuilder.Entity("Model.Hospital.MedicineType", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Type")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("MedicineTypes");
                });

            modelBuilder.Entity("health_clinic_class_diagram.Backend.Model.Hospital.Building", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("Color")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Shape")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Buildings");

                    b.HasData(
                        new
                        {
                            SerialNumber = "10001",
                            Color = "Orange",
                            Name = "Cardiology",
                            Shape = "Square"
                        },
                        new
                        {
                            SerialNumber = "10002",
                            Color = "Dark Orange",
                            Name = "Orthopedy",
                            Shape = "Square"
                        });
                });

            modelBuilder.Entity("health_clinic_class_diagram.Backend.Model.Hospital.Floor", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BuildingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Floors");

                    b.HasData(
                        new
                        {
                            SerialNumber = "1001",
                            BuildingName = "Cardiology",
                            Name = "Floor1"
                        },
                        new
                        {
                            SerialNumber = "1002",
                            BuildingName = "Cardiology",
                            Name = "Floor2"
                        },
                        new
                        {
                            SerialNumber = "1003",
                            BuildingName = "Orthopedy",
                            Name = "Floor1"
                        });
                });

            modelBuilder.Entity("health_clinic_class_diagram.Backend.Model.Hospital.RoomGEA", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("varchar(255) CHARACTER SET utf8mb4");

                    b.Property<string>("BuildingName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("FloorName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("SerialNumber");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            SerialNumber = "101",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "102",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "103",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 1",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "104",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "105",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 1",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "106",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 2",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "107",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 2",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "108",
                            BuildingName = "Cardiology",
                            FloorName = "Floor 2",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "109",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "110",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Operation room"
                        },
                        new
                        {
                            SerialNumber = "111",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "112",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Store room"
                        },
                        new
                        {
                            SerialNumber = "113",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        },
                        new
                        {
                            SerialNumber = "114",
                            BuildingName = "Orthopedy",
                            FloorName = "Floor 1",
                            Name = "Examination room"
                        });
                });

            modelBuilder.Entity("Model.Hospital.Medicine", b =>
                {
                    b.HasOne("Model.Hospital.MedicineManufacturer", "MedicineManufacturer")
                        .WithMany()
                        .HasForeignKey("MedicineManufacturerSerialNumber");

                    b.HasOne("Model.Hospital.MedicineType", "MedicineType")
                        .WithMany()
                        .HasForeignKey("MedicineTypeSerialNumber");
                });
#pragma warning restore 612, 618
        }
    }
}
